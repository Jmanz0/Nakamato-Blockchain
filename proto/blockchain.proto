syntax = "proto3";

package blockchain;
option go_package = "proto/gen";

// IncomingCommunicatorService
service IncomingCommunicatorService {
  
  // Get block by hash
  rpc GetBlockByHash(BlockRequest) returns (Block) {}
  
  // Submit new transaction
  rpc SubmitTransaction(Transaction) returns (TxResponse) {}

  // Submit new block
  rpc SubmitBlock(BlockWithHashes) returns (BlockResponse) {}

  // Gets a transactions Status
  rpc GetTransactionStatus (TransactionStatusRequest) returns (TransactionStatusResponse);

  // Not Implemented and Not Used
  // Get chain
  // rpc GetChain(Empty) returns (ChainResponse) {}
}

// Empty message for requests that don't need parameters
message Empty {}

message BlockRequest {
  string hash = 1;
}

// Block message containing block data
message Block {
  BlockHeader header = 1;
  BlockContent content = 2;
  string hash = 3;
}

// Block header containing consensus-critical information
message BlockHeader {
  int64 timestamp = 1;
  string previous_hash = 2;
  string content_hash = 3;
  int32 height = 4;
  string difficulty = 5;
  int64 nonce = 6;
}

message BlockWithHashes {
  Block block = 1;
  repeated string last_100_hashes = 2;
}

message BlockContent {
  repeated Transaction transactions = 1;
}

message BlockResponse {
  bool accepted = 1;
  string error = 2;
}

// Transaction message
message Transaction {
  repeated UTXO inputs = 1;
  repeated UTXO outputs = 2;
  int64 timestamp = 3;
  string signature = 4;
  string hash = 5;
  string senderpubkey = 6;
}

message UTXO {
  string tx_hash = 1;
  int32 index = 2;
  int64 amount = 3;
  string address = 4;
}

// Response after submitting transaction
message TxResponse {
  bool accepted = 1;
  string error = 2;
}

// Not Implemented and Not Used
// Response containing the blockchain
// message ChainResponse {
//   repeated Block blocks = 1;
// }

// Not Implemented and Not Used
// message CreateTransactionRequest {
//   string sender = 1;
//   string receiver = 2;
//   int64 amount = 3;
//   repeated UTXO input_utxos = 4;
// }

message TransactionStatusRequest {
  string hash = 1;
  int32 k = 2;
}

message TransactionStatusResponse {
  bool confirmed = 1;
  string error = 2;
}
