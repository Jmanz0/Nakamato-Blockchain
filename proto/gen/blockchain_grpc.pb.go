// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: proto/blockchain.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IncomingCommunicatorService_GetBlockByHash_FullMethodName    = "/blockchain.IncomingCommunicatorService/GetBlockByHash"
	IncomingCommunicatorService_SubmitTransaction_FullMethodName = "/blockchain.IncomingCommunicatorService/SubmitTransaction"
	IncomingCommunicatorService_SubmitBlock_FullMethodName       = "/blockchain.IncomingCommunicatorService/SubmitBlock"
)

// IncomingCommunicatorServiceClient is the client API for IncomingCommunicatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// IncomingCommunicatorService
type IncomingCommunicatorServiceClient interface {
	// Get block by hash
	GetBlockByHash(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*Block, error)
	// Submit new transaction
	SubmitTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TxResponse, error)
	// Submit new block
	SubmitBlock(ctx context.Context, in *BlockWithHeaders, opts ...grpc.CallOption) (*BlockResponse, error)
}

type incomingCommunicatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIncomingCommunicatorServiceClient(cc grpc.ClientConnInterface) IncomingCommunicatorServiceClient {
	return &incomingCommunicatorServiceClient{cc}
}

func (c *incomingCommunicatorServiceClient) GetBlockByHash(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*Block, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Block)
	err := c.cc.Invoke(ctx, IncomingCommunicatorService_GetBlockByHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incomingCommunicatorServiceClient) SubmitTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResponse)
	err := c.cc.Invoke(ctx, IncomingCommunicatorService_SubmitTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incomingCommunicatorServiceClient) SubmitBlock(ctx context.Context, in *BlockWithHeaders, opts ...grpc.CallOption) (*BlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockResponse)
	err := c.cc.Invoke(ctx, IncomingCommunicatorService_SubmitBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IncomingCommunicatorServiceServer is the server API for IncomingCommunicatorService service.
// All implementations must embed UnimplementedIncomingCommunicatorServiceServer
// for forward compatibility.
//
// IncomingCommunicatorService
type IncomingCommunicatorServiceServer interface {
	// Get block by hash
	GetBlockByHash(context.Context, *BlockRequest) (*Block, error)
	// Submit new transaction
	SubmitTransaction(context.Context, *Transaction) (*TxResponse, error)
	// Submit new block
	SubmitBlock(context.Context, *BlockWithHeaders) (*BlockResponse, error)
	mustEmbedUnimplementedIncomingCommunicatorServiceServer()
}

// UnimplementedIncomingCommunicatorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIncomingCommunicatorServiceServer struct{}

func (UnimplementedIncomingCommunicatorServiceServer) GetBlockByHash(context.Context, *BlockRequest) (*Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByHash not implemented")
}
func (UnimplementedIncomingCommunicatorServiceServer) SubmitTransaction(context.Context, *Transaction) (*TxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTransaction not implemented")
}
func (UnimplementedIncomingCommunicatorServiceServer) SubmitBlock(context.Context, *BlockWithHeaders) (*BlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBlock not implemented")
}
func (UnimplementedIncomingCommunicatorServiceServer) mustEmbedUnimplementedIncomingCommunicatorServiceServer() {
}
func (UnimplementedIncomingCommunicatorServiceServer) testEmbeddedByValue() {}

// UnsafeIncomingCommunicatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IncomingCommunicatorServiceServer will
// result in compilation errors.
type UnsafeIncomingCommunicatorServiceServer interface {
	mustEmbedUnimplementedIncomingCommunicatorServiceServer()
}

func RegisterIncomingCommunicatorServiceServer(s grpc.ServiceRegistrar, srv IncomingCommunicatorServiceServer) {
	// If the following call pancis, it indicates UnimplementedIncomingCommunicatorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IncomingCommunicatorService_ServiceDesc, srv)
}

func _IncomingCommunicatorService_GetBlockByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncomingCommunicatorServiceServer).GetBlockByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IncomingCommunicatorService_GetBlockByHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncomingCommunicatorServiceServer).GetBlockByHash(ctx, req.(*BlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IncomingCommunicatorService_SubmitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncomingCommunicatorServiceServer).SubmitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IncomingCommunicatorService_SubmitTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncomingCommunicatorServiceServer).SubmitTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _IncomingCommunicatorService_SubmitBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockWithHeaders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncomingCommunicatorServiceServer).SubmitBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IncomingCommunicatorService_SubmitBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncomingCommunicatorServiceServer).SubmitBlock(ctx, req.(*BlockWithHeaders))
	}
	return interceptor(ctx, in, info, handler)
}

// IncomingCommunicatorService_ServiceDesc is the grpc.ServiceDesc for IncomingCommunicatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IncomingCommunicatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blockchain.IncomingCommunicatorService",
	HandlerType: (*IncomingCommunicatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlockByHash",
			Handler:    _IncomingCommunicatorService_GetBlockByHash_Handler,
		},
		{
			MethodName: "SubmitTransaction",
			Handler:    _IncomingCommunicatorService_SubmitTransaction_Handler,
		},
		{
			MethodName: "SubmitBlock",
			Handler:    _IncomingCommunicatorService_SubmitBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/blockchain.proto",
}
